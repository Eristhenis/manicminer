#
# Control file template for Manic Miner
#
;
; SkoolKit control file for Manic Miner (Bug Byte version).
;
; Cavern descriptions based on reference material from Andrew Broad
; <http://webspace.webring.com/people/ja/andrewbroad/>.
;

; @start:32768
; @set-handle-unsupported-macros:32768=1
; @org:32768=32768
g 32768 Cavern name
D 32768 The cavern name is copied here and then used by the routine at #R34436.
S 32768,32
g 32800 Cavern tiles
D 32800 The cavern tiles are copied here by the routine at #R34436 and then used to draw the room by the routine at #R35445.
S 32800,9 Background tile (also used by the routines at #R35515, #R35770, #R36211, #R36344, #R37173 and #R37471)
S 32809,9 Floor tile 1 (also used by the routine at #R36211)
S 32818,9 Crumbling floor tile (also used by the routine at #R35515)
S 32827,9 Wall tile (also used by the routines at #R35515, #R35805 and #R36211)
S 32836,9 Conveyor tile (also used by the routine at #R35805)
S 32845,9 Nasty tile 1 (also used by the routines at #R35515 and #R37471)
S 32854,9 Nasty tile 2 (also used by the routines at #R35515 and #R37471)
S 32863,9 Floor tile 2
g 32872 Willy's pixel y-coordinate (x2)
D 32872 Initialised by the routine at #R34436, and used by the routines at #R35515, #R35805, #R37434 and #R37503. Holds the LSB of the address of the entry in the screen buffer address lookup table at #R33536 that corresponds to Willy's pixel y-coordinate; in practice, this is twice Willy's actual pixel y-coordinate.
g 32873 Willy's animation frame
D 32873 Initialised by the routine at #R34436, used by the routine at #R37503, and updated by the routine at #R35805.
g 32874 Willy's direction and movement flags
D 32874 Initialised by the routine at #R34436.
D 32874 #TABLE(default,centre,:w) {{ =h Bit(s) | =h Meaning | =h Used by }} {{ 0 | Direction Willy is facing (reset=right, set=left) | #R35805, #R37503 }} {{ 1 | Willy's movement flag (set=moving) | #R35515, #R35805 }} {{ 2-7 | Unused (always reset) | }} TABLE#
g 32875 Airborne status indicator
D 32875 Initialised by the routine at #R34436, and used by the routines at #R34574, #R35515, #R35805 and #R36101.
g 32876 Address of Willy's location in the attribute buffer at 23552
D 32876 Initialised by the routine at #R34436, used by the routines at #R35515, #R36805, #R37403, #R37434 and #R37503, and updated by the routine at #R35805.
W 32876
g 32878 Jumping animation counter
D 32878 Initialised by the routine at #R34436, and used by the routines at #R35515 and #R35805.
g 32879 Conveyor definition
D 32879 The conveyor definition is copied here by the routine at #R34436.
B 32879 Direction (0=left, 1=right; used by the routines at #R35805 and #R37125)
W 32880 Address of the conveyor's location in the screen buffer at 28672 (used by the routine at #R37125)
B 32882 Length (used by the routine at #R37125)
g 32883 Border colour
D 32883 Initialised and used by the routine at #R34436, and also used by the routines at #R34574, #R35515 and #R37173.
g 32884 Attribute of the last item drawn
D 32884 Initialised by the routine at #R34436, and used by the routines at #R36344 and #R36707. Holds the attribute byte of the last item drawn, or 0 if all the items have been collected.
g 32885 Item definitions
D 32885 The item definitions are copied here by the routine at #R34436, and then used by the routine at #R36707. An item definition contains the following information:
D 32885 #TABLE(default,centre) {{ =h Byte(s) | =h Contents }} {{ 0 | Current attribute }} {{ 1,2 | Address of the item's location in the attribute buffer at 23552 }} {{ 3 | MSB of the address of the item's location in the screen buffer at 24576 }} {{ 4 | Unused (always 255) }} TABLE#
S 32885,5 Item 1
S 32890,5 Item 2
S 32895,5 Item 3
S 32900,5 Item 4
S 32905,5 Item 5
B 32910 Terminator (set to 255)
g 32911 Portal definition
D 32911 The portal definition is copied here by the routine at #R34436.
B 32911 Attribute byte (used by the routines at #R36707 and #R36805)
S 32912,32 Graphic data (used by the routine at #R36805)
W 32944 Address of the portal's location in the attribute buffer at 23552 (used by the routine at #R36805)
W 32946 Address of the portal's location in the screen buffer at 24576 (used by the routine at #R36805)
g 32948 Item graphic
D 32948 The item graphic is copied here by the routine at #R34436, and then used by the routine at #R36707.
S 32948,8
g 32956 Remaining air supply
D 32956 Initialised and used by the routine at #R34436, and also used by the routines at #R35388 and #R36904.
g 32958 Horizontal guardians
D 32958 The horizontal guardian definitions are copied here by the routine at #R34436, and then used by the routines at #R36111 and #R36266.
S 32958,7 Horizontal guardian 1
S 32965,7 Horizontal guardian 2
S 32972,7 Horizontal guardian 3
S 32979,7 Horizontal guardian 4
B 32986 Terminator (set to 255)
g 32987 Eugene's direction
D 32987 Initialised by the routine at #R34436, and used by the routines at #R36344 and #R37173.
g 32988 Eugene's height
D 32988 Initialised by the routine at #R34436, and used by the routines at #R34252 (to hold the index into the message scrolled across the screen after the theme tune has finished playing), #R35140 (to hold the distance of the boot from the top of the screen as it descends onto Willy), #R36344 and #R37173.
g 32989 Vertical guardians
D 32989 The vertical guardian definitions are copied here by the routine at #R34436, and then used by the routines at #R36469 and #R36593.
S 32989,7 Vertical guardian 1
S 32996,7 Vertical guardian 2
S 33003,7 Vertical guardian 3
S 33010,7 Vertical guardian 4
B 33017 Terminator (set to 255)
u 33018 Unused
D 33018 These 6 bytes are overwritten by the routine at #R34436, but not used.
S 33018,6
g 33024 Guardian graphic data
D 33024 The guardian graphic data is copied here by the routine at #R34436, and then used by the routines at #R36266, #R36469, #R36593 and #R37173.
S 33024,256
b 33280 Willy sprite graphic data
D 33280 Used by the routines at #R34252, #R34574 and #R37503.
D 33280 #UDGTABLE {{ #UDGARRAY2,7,,2;33280-33297-1-16(willy0*) | #UDGARRAY2,7,,2;33312-33329-1-16(willy1*) | #UDGARRAY2,7,,2;33344-33361-1-16(willy2*) | #UDGARRAY2,7,,2;33376-33393-1-16(willy3*) | #UDGARRAY*willy0;willy1;willy2;willy3(willy_r.gif) }} {{ #UDGARRAY2,7,,2;33408-33425-1-16(willy4*) | #UDGARRAY2,7,,2;33440-33457-1-16(willy5*) | #UDGARRAY2,7,,2;33472-33489-1-16(willy6*) | #UDGARRAY2,7,,2;33504-33521-1-16(willy7*) | #UDGARRAY*willy7;willy6;willy5;willy4(willy_l.gif) }} TABLE#
B 33280,256,16
w 33536 Screen buffer address lookup table
D 33536 Used by the routines at #R35140, #R36344, #R36469, #R36593, #R37173 and #R37503. The value of the Nth entry (0<=N<=127) in this lookup table is the screen buffer address for the point with pixel coordinates (x,y)=(0,N), with the origin (0,0) at the top-left corner.
{sba_table}
c 33792 The game has just loaded
g 33799 Current cavern number
D 33799 Initialised by the routine at #R34252, and used by the routines at #R34436, #R34574, #R35445, #R36266 and #R36904.
b 33800 Left-right movement table
D 33800 Used by the routine at #R35805. The entries in this table are used to map the existing value (V) of Willy's direction and movement flags at #R32874 to a new value (V'), depending on the direction Willy is facing and how he is moving or being moved (by 'left' and 'right' keypresses and joystick input, or by a conveyor).
D 33800 One of the first four entries is used when Willy is not moving.
  33800 V=0 (facing right, no movement) + no movement: V'=0 (no change)
  33801 V=1 (facing left, no movement) + no movement: V'=1 (no change)
  33802 V=2 (facing right, moving) + no movement: V'=0 (facing right, no movement) (i.e. stop)
  33803 V=3 (facing left, moving) + no movement: V'=1 (facing left, no movement) (i.e. stop)
D 33804 One of the next four entries is used when Willy is moving left.
  33804 V=0 (facing right, no movement) + move left: V'=1 (facing left, no movement) (i.e. turn around)
  33805 V=1 (facing left, no movement) + move left: V'=3 (facing left, moving)
  33806 V=2 (facing right, moving) + move left: V'=1 (facing left, no movement) (i.e. turn around)
  33807 V=3 (facing left, moving) + move left: V'=3 (no change)
D 33808 One of the next four entries is used when Willy is moving right.
  33808 V=0 (facing right, no movement) + move right: V'=2 (facing right, moving)
  33809 V=1 (facing left, no movement) + move right: V'=0 (facing right, no movement) (i.e. turn around)
  33810 V=2 (facing right, moving) + move right: V'=2 (no change)
  33811 V=3 (facing left, moving) + move right: V'=0 (facing right, no movement) (i.e. turn around)
D 33812 One of the final four entries is used when Willy is being pulled both left and right; each entry leaves the flags at #R32874 unchanged (so Willy carries on moving in the direction he's already moving, or remains stationary).
  33812 V=V'=0 (facing right, no movement)
  33813 V=V'=1 (facing left, no movement)
  33814 V=V'=2 (facing right, moving)
  33815 V=V'=3 (facing left, moving)
t 33816 'AIR'
D 33816 Used by the routine at #R34436.
u 33819
T 33819,4
g 33823 High score
D 33823 Used by the routine at #R34574 and updated by the routine at #R35140.
T 33823,6
g 33829 Score
D 33829 Used by the routines at #R34574, #R35140, #R36904 and #R37098.
T 33829,4 Overflow digits (these may be updated, but are never printed)
T 33833,6
t 33839 'High Score 000000#SPACE(3)Score 000000'
D 33839 Used by the routine at #R34436.
t 33871 'Game'
D 33871 Used by the routine at #R35140.
t 33875 'Over'
D 33875 Used by the routine at #R35140.
g 33879 Lives remaining
D 33879 Initialised to 2 by the routine at #R34252, and used and updated by the routines at #R34574 and #R37098.
g 33880 Screen flash counter
D 33880 Initialised by the routine at #R34252, and used by the routines at #R34574 and #R37098.
g 33881 Kempston joystick indicator
D 33881 Initialised by the routine at #R34252, and used by the routines at #R34574, #R35805 and #R37687. Holds 1 if a joystick is present, 0 otherwise.
g 33882 Game mode indicator
D 33882 Initialised by the routine at #R34252, and used by the routines at #R34436, #R34574 and #R36904. Holds 0 when a game is in progress, or a value from 1 to 64 when in demo mode.
g 33883 In-game music note index
D 33883 Initialised by the routine at #R34252, and used and updated by the routine at #R34574.
g 33884 Music flags
D 33884 The keypress flag in bit 0 is initialised by the routine at #R34252; bits 0 and 1 are checked and updated by the routine at #R34574.
D 33884 #TABLE(default,centre,:w) {{ =h Bit(s) | =h Meaning }} {{ 0 | Keypress flag (set=H-ENTER being pressed, reset=no key pressed) }} {{ 1 | In-game music flag (set=music off, reset=music on) }} {{ 2-7 | Unused }} TABLE#
g 33885 6031769 key counter
D 33885 Used by the routines at #R34574 and #R36904.
b 33886 6031769
D 33886 Used by the routine at #R34574.
B 33886,b2 (no keys pressed)
B 33888,b2 6
B 33890,b2 0
B 33892,b2 3
B 33894,b2 1
B 33896,b2 7
B 33898,b2 6
B 33900,b2 9
b 33902 Title screen tune data
D 33902 Used by the routine at #R37596.
B 33902,286,16
b 34188 In-game tune data
D 34188 Used by the routine at #R34574.
B 34188,64,16
c 34252 Display the title screen and play the theme tune
D 34252 Used by the routines at #R33792, #R34574 and #R35140.
D 34252 The first thing this routine does is initialise some game status buffer variables in preparation for the next game.
  34252 #REGa=0
  34253 Initialise the current cavern number at #R33799
  34256 Initialise the Kempston joystick indicator at #R33881
  34259 Initialise the game mode indicator at #R33882
  34262 Initialise the in-game music note index at #R33883
  34265 Initialise the screen flash counter at #R33880
  34268,5 Initialise the number of lives remaining at #R33879
  34273,5 Initialise the keypress flag in bit 0 at #R33884
D 34278 Next, prepare the screen.
  34278,13 Clear the entire display file
  34291,11 Copy the graphic data at #R40960 to the top two-thirds of the display file
  34302,11 Draw Willy at (9,29)
  34313,11 Copy the attribute bytes from #R64512 to the top third of the attribute file
  34324,8 Copy the attribute bytes from #R40448 to the bottom two-thirds of the attribute file
D 34332 Now check whether there is a joystick connected.
  34332 #REGb=0, #REGc=31 (joystick port)
  34335 Disable interrupts (which are already disabled)
  34336 #REGa=0
  34337,5 Combine 256 readings of the joystick port in #REGa
  34342 Is a joystick connected (bit 5 reset)?
  34344 Jump if not
  34346 Set the Kempston joystick indicator at #R33881 to 1
D 34351 And finally, play the theme tune and check for keypresses.
  34351 Point #REGiy at the theme tune data at #R33902
  34355 Play the theme tune
  34358 Start the game if ENTER or the fire button was pressed
  34361,4 Initialise the game status buffer variable at #R32988; this will be used as an index for the message scrolled across the screen
  34365 Pick up the message index from #R32988
  34368,6 Point #REGix at the corresponding location in the message at #R40192
  34374,8 Print 32 characters of the message at (19,0)
  34382 Pick up the message index from #R32988
  34385,5 Keep only bits 1 and 2, and move them into bits 6 and 7, so that #REGa holds 0, 64, 128 or 192; this value determines the animation frame to use for Willy
  34390,3 Point #REGde at the graphic data for Willy's sprite (#R33280+#REGa)
  34393,8 Draw Willy at (9,29)
  34401,8 Pause for about 0.09s
  34409,5 Read keys H-J-K-L-ENTER
  34414 Keep only bit 0 of the result (ENTER)
  34416 Is ENTER being pressed?
  34418 If so, start the game
  34420 Pick up the message index from #R32988
  34423 Increment it
  34424 Set the zero flag if we've reached the end of the message
  34426 Store the new message index at #R32988
  34429 Jump back unless we've finished scrolling the message across the screen
  34431 Initialise the game mode indicator at #R33882 to 64: demo mode
E 34252 This routine continues into the one at #R34436.
c 34436 Start the game (or demo mode)
  34436,13 Initialise the score at #R33829
D 34449 This entry point is used by the routines at #R34574 (when teleporting into a cavern or reinitialising the current cavern after Willy has lost a life) and #R36904.
  34449 Pick up the number of the current cavern from #R33799
  34452,9 Point #REGhl at the first byte of the cavern definition
  34461,8 Copy the cavern's attribute bytes into the buffer at 24064
  34469,8 Copy the rest of the cavern definition into the game status buffer at #LINK:GameStatusBuffer#32768(32768-33279)
  34477 Draw the current cavern to the screen buffer at 28672
  34480,13 Clear the bottom third of the display file
  34493,12 Print the cavern name (see #R32768) at (16,0)
  34505,12 Print 'AIR' (see #R33816) at (17,0)
  34517 Initialise #REGa to 82; this is the MSB of the display file address at which to start drawing the bar that represents the air supply
  34519,6 Prepare #REGhl and #REGde for drawing a row of pixels in the air bar
  34525 Save the display file address MSB in #REGb briefly
  34526 Pick up the value of the initial air supply from #R32956
  34529,3 Now #REGc determines the length of the air bar (in cell widths)
  34532 Restore the display file address MSB to #REGa
  34533 Now #REGbc determines the length of the air bar (in cell widths)
  34535,4 Draw a single row of pixels across #REGc cells
  34539 Increment the display file address MSB in #REGa (moving down to the next row of pixels)
  34540 Have we drawn all four rows of pixels in the air bar yet?
  34542 If not, jump back to draw the next one
  34544,12 Print 'High Score 000000#SPACE(3)Score 000000' (see #R33839) at (19,0)
  34556 Pick up the border colour for the current cavern from #R32883
  34559,4 Set the border colour
  34563 Pick up the game mode indicator from #R33882
  34566 Are we in demo mode?
  34567 If not, enter the main loop now
  34569,5 Reset the game mode indicator at #R33882 to 64 (we're in demo mode)
E 34436 This routine continues into the main loop at #R34574.
c 34574 Main loop
D 34574 The routine at #R34436 continues here.
D 34574 The first thing to do is check whether there are any remaining lives to draw at the bottom of the screen.
  34574 Pick up the number of lives remaining from #R33879
  34577 Set #REGhl to the display file address at which to draw the first Willy sprite
  34580 Are there any lives remaining?
  34581 Jump if not
  34583 Initialise #REGb to the number of lives remaining
D 34584 The following loop draws the remaining lives at the bottom of the screen.
  34584 #REGc=0; this tells the sprite-drawing routine at #R36852 to overwrite any existing graphics
  34586 Save #REGhl and #REGbc briefly
  34588 Pick up the in-game music note index from #R33883; this will determine the animation frame for the Willy sprites
  34591,5 Now #REGa=0 (frame 0), 32 (frame 1), 64 (frame 2) or 96 (frame 3)
  34596,3 Point #REGde at the corresponding Willy sprite (at #R33280+#REGa)
  34599 Draw the Willy sprite on the screen
  34602 Restore #REGhl and #REGbc
  34604 Move #REGhl along to the location at which to draw the next Willy sprite
  34606 Jump back to draw any remaining sprites
D 34608 Now draw a boot if cheat mode has been activated.
  34608 Pick up the 6031769 key counter from #R33885
  34611 Has 6031769 been keyed in yet?
  34613 Jump if not
  34615 Point #REGde at the graphic data for the boot (at #R47840)
  34618 #REGc=0 (overwrite mode)
  34620 Draw the boot at the bottom of the screen next to the remaining lives
D 34623 Next, prepare the screen and attribute buffers for drawing to the screen.
  34623,11 Copy the contents of the attribute buffer at 24064 (the attributes for the empty cavern) into the attribute buffer at 23552
  34634,11 Copy the contents of the screen buffer at 28672 (the tiles for the empty cavern) into the screen buffer at 24576
  34645 Move the horizontal guardians in the current cavern
  34648 Pick up the game mode indicator from #R33882
  34651 Are we in demo mode?
  34652 If not, move Willy
  34655 Pick up the game mode indicator from #R33882
  34658 Are we in demo mode?
  34659 If not, check and set the attribute bytes for Willy's sprite in the buffer at 23552, and draw Willy to the screen buffer at 24576
  34662 Draw the horizontal guardians in the current cavern
  34665 Move the conveyor in the current cavern
  34668 Draw the items in the current cavern and collect any that Willy is touching
  34671 Pick up the number of the current cavern from #R33799
  34674 Are we in #R49152(Eugene's Lair)?
  34676 If so, move and draw Eugene
  34679 Pick up the number of the current cavern from #R33799
  34682 Are we in #R58368(Skylab Landing Bay)?
  34684 If so, move and draw the Skylabs
  34687 Pick up the number of the current cavern from #R33799
  34690 Are we in #R53248(Wacky Amoebatrons) or beyond?
  34692 If so, move and draw the vertical guardians
  34695 Pick up the number of the current cavern from #R33799
  34698 Are we in #R52224(Miner Willy meets the Kong Beast)?
  34700 If so, move and draw the Kong Beast
  34703 Pick up the number of the current cavern from #R33799
  34706 Are we in #R56320(Return of the Alien Kong Beast)?
  34708 If so, move and draw the Kong Beast
  34711 Pick up the number of the current cavern from #R33799
  34714 Are we in #R63488(Solar Power Generator)?
  34716 If so, move and draw the light beam
  34719 Draw the portal in the current cavern
  34722,11 Copy the contents of the screen buffer at 24576 to the display file
  34733 Pick up the screen flash counter from #R33880
  34736 Is it zero?
  34737 Jump if so
  34739,4 Decrement the screen flash counter at #R33880
  34743,5 Move bits 0-2 into bits 3-5 and clear all the other bits
  34748,12 Set every attribute byte in the buffer at 23552 to this value
  34760,11 Copy the contents of the attribute buffer at 23552 to the attribute file
  34771,12 Print the score (see #R33833) at (19,26)
  34783,12 Print the high score (see #R33823) at (19,11)
  34795 Decrease the air remaining in the current cavern
  34798 Jump if there's no air left
D 34801 Now check whether SHIFT and SPACE are being pressed.
  34801,5 Read keys SHIFT-Z-X-C-V
  34806 Save the result in #REGe
  34807,4 Read keys B-N-M-SS-SPACE
  34811 Combine the results
  34812 Are SHIFT and SPACE being pressed?
  34814 If so, quit the game
D 34817 Now read the keys A, S, D, F and G (which pause the game).
  34817,4 Read keys A-S-D-F-G
  34821,4 Are any of these keys being pressed?
  34825 Jump if not
  34827,4 Read every half-row of keys except A-S-D-F-G
  34831,4 Are any of these keys being pressed?
  34835 Jump back if not (the game is still paused)
D 34837 Here we check whether Willy has had a fatal accident.
  34837 Pick up the airborne status indicator from #R32875
  34840 Has Willy landed after falling from too great a height, or collided with a nasty or a guardian?
  34842 Jump if so
D 34845 Now read the keys H, J, K, L and ENTER (which toggle the in-game music).
  34845 Prepare #REGb for reading keys H-J-K-L-ENTER
  34847 Point #REGhl at the music flags at #R33884
  34850 Read keys H-J-K-L-ENTER
  34852,4 Are any of these keys being pressed?
  34856 Jump if not
  34858 Were any of these keys being pressed the last time we checked?
  34860 Jump if so
  34862,4 Set bit 0 (the keypress flag) and flip bit 1 (the in-game music flag) at #R33884
  34868 Reset bit 0 (the keypress flag) at #R33884
  34870 Has the in-game music been switched off?
  34872 Jump if so
D 34874 The next section of code plays a note of the in-game music.
  34874,7 Increment the in-game music note index at #R33883
  34881,10 Point HL at the appropriate entry in the tune data table at #R34188
  34891 Pick up the border colour for the current cavern from #R32883
  34894 Initialise the pitch delay counter in #REGe
  34895 Initialise the duration delay counters in #REGb (0) and #REGc (3)
  34898,13 Produce a note of the in-game music
D 34911 If we're in demo mode, check the keyboard and joystick and return to the title screen if there's any input.
  34911 Pick up the game mode indicator from #R33882
  34914 Are we in demo mode?
  34915 Jump if not
  34917 We're in demo mode; is it time to show the next cavern?
  34918 Jump if so
  34921 Update the game mode indicator at #R33882
  34924,5 Read every row of keys on the keyboard
  34929,4 Are any keys being pressed?
  34933 If so, return to the title screen
  34936 Pick up the Kempston joystick indicator from #R33881
  34939 Is there a joystick connected?
  34940 Jump if not
  34942 Collect input from the joystick
  34944 Is the joystick being moved or the fire button being pressed?
  34945 If so, return to the title screen
D 34948 Here we check the teleport keys.
  34948,5 Read keys 6-7-8-9-0
  34953 Is '6' (the activator key) being pressed?
  34955 Jump if not
  34958 Pick up the 6031769 key counter from #R33885
  34961 Has 6031769 been keyed in yet?
  34963 Jump if not
  34966,4 Read keys 1-2-3-4-5
  34970,3 Keep only bits 0-4 and flip them
  34973 Is the result 20 or greater?
  34975 Jump if so (this is not a cavern number)
  34978 Store the cavern number at #R33799
  34981 Teleport into the cavern
D 34984 Now check the 6031769 keys.
  34984 Pick up the 6031769 key counter from #R33885.
  34987 Has 6031769 been keyed in yet?
  34989 If so, jump back to the start of the main loop
  34992,10 Point IX at the corresponding entry in the 6031769 table at #R33888
  35002,5 Read keys 1-2-3-4-5
  35007 Keep only bits 0-5
  35009 Does this match the first byte of the entry in the 6031769 table?
  35012 Jump if so
  35014 Are any of the keys 1-2-3-4-5 being pressed?
  35016 If not, jump back to the start of the main loop
  35019 Does the keyboard reading match the first byte of the previous entry in the 6031769 table?
  35022 If so, jump back to the start of the main loop
  35025,4 Reset the 6031769 key counter at #R33885 to 0 (an incorrect key is being pressed)
  35029 Jump back to the start of the main loop
  35032,4 Read keys 6-7-8-9-0
  35036 Keep only bits 0-5
  35038 Does this match the second byte of the entry in the 6031769 table?
  35041 If so, jump to increment the 6031769 key counter
  35043 Are any of the keys 6-7-8-9-0 being pressed?
  35045 If not, jump back to the start of the main loop
  35048 Does the keyboard reading match the second byte of the previous entry in the 6031769 table?
  35051 If so, jump back to the start of the main loop
  35054,4 Reset the 6031769 key counter at #R33885 to 0 (an incorrect key is being pressed)
  35058 Jump back to the start of the main loop
  35061,7 Increment the 6031769 key counter at #R33885 (the next key in the sequence is being pressed)
  35068 Jump back to the start of the main loop
D 35071 The air in the cavern has run out, or Willy has had a fatal accident, or it's demo mode and it's time to show the next cavern.
  35071 Pick up the game mode indicator from #R33882
  35074 Is it demo mode?
  35075 If so, move to the next cavern
  35078 #REGa=71 (INK 7: PAPER 0: BRIGHT 1)
D 35080 The following loop fills the top two thirds of the attribute file with a single value (71 TO 64 STEP -1) and makes a sound effect.
  35080,12 Fill the top two thirds of the attribute file with the value in #REGa
  35092 Save the attribute byte (64-71) in #REGe for later retrieval
  35093,9 #REGd=7+8*(7-(#REGe AND 7)); this value determines the pitch of the short note that will be played
  35102,7 #REGc=8+32*(#REGe AND 7); this value determines the duration of the short note that will be played
  35109 Set bit 4 of #REGa (for no apparent reason)
  35111 Set #REGa=0 (this will make the border black)
  35112,10 Produce a short note whose pitch is determined by #REGd and whose duration is determined by #REGc
  35122 Restore the attribute byte (originally 71) to #REGa
  35123 Decrement it (effectively decrementing the INK colour)
  35124 Have we used attribute value 64 (INK 0) yet?
  35126 If not, jump back to update the INK colour in the top two thirds of the screen and make another sound effect
D 35128 Finally, check whether any lives remain.
  35128,4 Pick up the number of lives remaining from #R33879
  35132 Are there any lives remaining?
  35133 If not, display the game over sequence
  35136 Decrease the number of lives remaining by one
  35137 Jump back to reinitialise the current cavern
c 35140 Display the game over sequence
D 35140 Used by the routine at #R34574. First check whether we have a new high score.
  35140 Point #REGhl at the high score at #R33823
  35143 Point #REGde at the current score at #R33833
  35146 There are 6 digits to compare
  35148 Pick up a digit of the current score
  35149 Compare it with the corresponding digit of the high score
  35150 Jump if it's less than the corresponding digit of the high score
  35153 Jump if it's greater than the corresponding digit of the high score
  35156 Point #REGhl at the next digit of the high score
  35157 Point #REGde at the next digit of the current score
  35158 Jump back to compare the next pair of digits
  35160,11 Replace the high score with the current score
D 35171 Now prepare the screen for the game over sequence.
  35171,13 Clear the top two-thirds of the display file
  35184,4 Initialise the game status buffer variable at #R32988; this variable will determine the distance of the boot from the top of the screen
  35188,11 Draw Willy at (12,15)
  35199,11 Draw the plinth (see #R46816) underneath Willy at (14,15)
D 35210 The following loop draws the boot's descent onto the plinth that supports Willy.
  35210 Pick up the distance variable from #R32988
  35213,3 Point #REGbc at the corresponding entry in the screen buffer address lookup table at #R33536
  35216,9 Point #REGhl at the corresponding location in the display file
  35225,8 Draw the boot (see #R47840) at this location, without erasing the boot at the previous location; this leaves the portion of the boot sprite that's above the ankle in place, and makes the boot appear as if it's at the end of a long, extending trouser leg
  35233 Pick up the distance variable from #R32988
  35236 #REGa=255-#REGa
  35237 Store this value (63-255) in #REGe; it determines the (rising) pitch of the sound effect that will be made
  35238 #REGa=0 (black border)
  35239 #REGc=64; this value determines the duration of the sound effect
  35242,10 Produce a short note whose pitch is determined by #REGe
  35252,9 Prepare #REGbc, #REGde and #REGhl for setting the attribute bytes in the top two-thirds of the screen
  35261 Pick up the distance variable from #R32988
  35264 Keep only bits 2 and 3
  35266 Shift bits 2 and 3 into bits 3 and 4; these bits determine the PAPER colour: 0, 1, 2 or 3
  35267 Set bits 0-2 (INK 7) and 6 (BRIGHT 1)
  35269,3 Copy this attribute value into the top two-thirds of the screen
  35272,8 Add 4 to the distance variable at #R32988; this will move the boot sprite down two pixel rows
  35280 Has the boot met the plinth yet?
  35282 Jump back if not
D 35284 Now print the "Game Over" message, just to drive the point home.
  35284,12 Print "Game" (see #R33871) at (6,10)
  35296,12 Print "Over" (see #R33875) at (6,18)
  35308,5 Prepare the delay counters for the following loop; the counter in #REGc will also determine the INK colours to use for the "Game Over" message
D 35313 The following loop makes the "Game Over" message glisten for about 1.57s.
  35313 Delay for about a millisecond
  35315,8 Change the INK colour of the "G" in "Game" at (6,10)
  35323,8 Change the INK colour of the "a" in "Game" at (6,11)
  35331,8 Change the INK colour of the "m" in "Game" at (6,12)
  35339,8 Change the INK colour of the "e" in "Game" at (6,13)
  35347,8 Change the INK colour of the "O" in "Over" at (6,18)
  35355,8 Change the INK colour of the "v" in "Over" at (6,19)
  35363,8 Change the INK colour of the "e" in "Over" at (6,20)
  35371,8 Change the INK colour of the "r" in "Over" at (6,21)
  35379 Decrement the counter in #REGc
  35380 Jump back unless it's zero
  35382 Decrement the counter in #REGd (initially 6)
  35383 Jump back unless it's zero
  35385 Display the title screen and play the theme tune
c 35388 Decrease the air remaining in the current cavern
c 35445 Draw the current cavern to the screen buffer at 28672
c 35515 Move Willy (1)
D 35515 Used by the routine at #R34574. This routine deals with Willy if he's jumping or falling.
  35515 Pick up the airborne status indicator from #R32875
  35518 Is Willy jumping?
  35520 Jump if not
D 35522 Willy is currently jumping.
  35522 Pick up the jumping animation counter (0-17) from #R32878
  35525,4 Now -8<=#REGa<=8 (and #REGa is even)
  35529,5 Adjust Willy's pixel y-coordinate at #R32872 depending on where Willy is in the jump
  35534 Adjust Willy's attribute buffer location at #R32876 depending on his pixel y-coordinate
  35537 Pick up the attribute byte of the wall tile for the current cavern from #R32827
  35540 Is the top-left cell of Willy's sprite overlapping a wall tile?
  35541 Jump if so
  35544 Point #REGhl at the top-right cell occupied by Willy's sprite
  35545 Is the top-right cell of Willy's sprite overlapping a wall tile?
  35546 Jump if so
  35549,7 Increment the jumping animation counter at #R32878
  35556 #REGa=J-8, where J (1-18) is the new value of the jumping animation counter
  35558 Jump if J>=8
  35561 #REGa=8-J (1<=J<=7, 1<=#REGa<=7)
  35563 #REGa=1+ABS(J-8)
  35564,4 #REGd=8*(1+ABS(J-8)); this value determines the pitch of the jumping sound effect (rising as Willy rises, falling as Willy falls)
  35568 #REGc=32; this value determines the duration of the jumping sound effect
  35570 Pick up the border colour for the current cavern from #R32883
  35573,10 Make a jumping sound effect
  35583 Pick up the jumping animation counter (1-18) from #R32878
  35586 Has Willy reached the end of the jump?
  35588 Jump if so
  35591 Is the jumping animation counter now 16?
  35593 Jump if so
  35595 Is the jumping animation counter now 13?
  35597 Jump if not
D 35600 If we get here, then Willy is standing on the floor, or he's falling, or his jumping animation counter is 13 or 16.
  35600 Pick up Willy's pixel y-coordinate from #R32872
  35603 Does Willy's sprite occupy six cells at the moment?
  35605 Jump if so
  35607 Pick up Willy's attribute buffer coordinates from #R32876
  35610,4 Point #REGhl at the left-hand cell below Willy's sprite
  35614 Pick up the attribute byte of the crumbling floor tile for the current cavern from #R32818
  35617 Does the left-hand cell below Willy's sprite contain a crumbling floor tile?
  35618 If so, make it crumble
  35621 Pick up the attribute byte of the first nasty tile for the current cavern from #R32845
  35624 Does the left-hand cell below Willy's sprite contain a nasty tile?
  35625 Jump if so
  35627 Pick up the attribute byte of the second nasty tile for the current cavern from #R32854
  35630 Does the left-hand cell below Willy's sprite contain a nasty tile?
  35631 Jump if so
  35633 Point #REGhl at the right-hand cell below Willy's sprite
  35634 Pick up the attribute byte of the crumbling floor tile for the current cavern from #R32818
  35637 Does the right-hand cell below Willy's sprite contain a crumbling floor tile?
  35638 If so, make it crumble
  35641 Pick up the attribute byte of the first nasty tile for the current cavern from #R32845
  35644 Does the right-hand cell below Willy's sprite contain a nasty tile?
  35645 Jump if so
  35647 Pick up the attribute byte of the second nasty tile for the current cavern from #R32854
  35650 Does the right-hand cell below Willy's sprite contain a nasty tile?
  35651 Jump if so
  35653 Pick up the attribute byte of the background tile for the current cavern from #R32800
  35656 Set the zero flag if the right-hand cell below Willy's sprite is empty
  35657 Point #REGhl at the left-hand cell below Willy's sprite
  35658 Jump if the right-hand cell below Willy's sprite is not empty
  35661 Is the left-hand cell below Willy's sprite empty?
  35662 Jump if not
  35665 Pick up the airborne status indicator from #R32875
  35668 Is Willy jumping?
  35670 Jump if so
D 35673 If we get here, then Willy is either in the process of falling or just about to start falling.
  35673,5 Reset bit 1 at #R32874: Willy is not moving left or right
  35678 Is Willy already falling?
  35679 Jump if not
  35682,4 Increment the airborne status indicator at #R32875
  35686,5 #REGd=8*#REGa; this value determines the pitch of the falling sound effect
  35691 #REGc=32; this value determines the duration of the falling sound effect
  35693 Pick up the border colour for the current cavern from #R32883
  35696,10 Make a falling sound effect
  35706,8 Add 8 to Willy's pixel y-coordinate at #R32872; this moves Willy downwards by 4 pixels
  35714,3 #REGl=16*Y, where Y is Willy's screen y-coordinate (0-14)
  35717 Clear #REGa and the carry flag
  35718 Now #REGl=32*(Y-8*INT(Y/8)), and the carry flag is set if Willy is in the lower half of the cavern (Y>=8)
  35720,3 #REGh=92 or 93 (MSB of the address of Willy's location in the attribute buffer)
  35723,5 Pick up Willy's screen x-coordinate (0-30) from bits 0-5 at #R32876
  35728,2 Now #REGl holds the LSB of Willy's attribute buffer address
  35730,3 Store Willy's updated attribute buffer location at #R32876
D 35734 Willy has just finished a jump.
  35734,5 Set the airborne status indicator at #R32875 to 6: Willy will continue to fall unless he's landed on a wall or floor block
D 35740 Willy has just started falling.
  35740,5 Set the airborne status indicator at #R32875 to 2
D 35746 The top-left or top-right cell of Willy's sprite is overlapping a wall tile.
  35746,10 Adjust Willy's pixel y-coordinate at #R32872 so that the top row of cells of his sprite is just below the wall tile
  35756 Adjust Willy's attribute buffer location at #R32876 to account for this new pixel y-coordinate
  35759,5 Set the airborne status indicator at #R32875 to 2: Willy has started falling
  35764,5 Reset bit 1 at #R32874: Willy is not moving left or right
c 35770 Animate the crumbling floor in the current cavern
c 35805 Move Willy (2)
D 35805 Used by the routine at #R35515. This routine checks the keyboard and joystick, and moves Willy left or right if necessary.
R 35805 HL Attribute buffer address of the left-hand cell below Willy's sprite
  35805 Pick up the airborne status indicator from #R32875
  35808 Has Willy just landed after falling from too great a height?
  35810 If so, kill him
  35813 Initialise #REGe to 255 (all bits set); it will be used to hold keyboard and joystick readings
  35815,4 Reset the airborne status indicator at #R32875 (Willy has landed safely)
  35819 Pick up the attribute byte of the conveyor tile for the current cavern from #R32836
  35822 Does the attribute byte of the left-hand cell below Willy's sprite match that of the conveyor tile?
  35823 Jump if so
  35825 Point #REGhl at the right-hand cell below Willy's sprite
  35826 Does the attribute byte of the right-hand cell below Willy's sprite match that of the conveyor tile?
  35827 Jump if not
  35829 Pick up the direction byte of the conveyor definition from #R32879 (0=left, 1=right)
  35832,3 Now #REGe=253 (bit 1 reset) if the conveyor is moving left, or 254 (bit 0 reset) if it's moving right
  35835,5 Read keys P-O-U-I-Y (right, left, right, left, right) into bits 0-4 of #REGa
  35840,4 Set bit 5 and reset bits 6 and 7
  35844 Reset bit 0 if the conveyor is moving right, or bit 1 if it's moving left
  35845 Save the result in #REGe
  35846,5 Read keys Q-W-E-R-T (left, right, left, right, left) into bits 0-4 of #REGa
  35851,6 Keep only bits 0-4, shift them into bits 1-5, and set bit 0
  35857,2 Merge this keyboard reading into bits 1-5 of #REGe
  35859,4 Read keys 1-2-3-4-5 ('5' is left) into bits 0-4 of #REGa
  35863,3 Rotate the result right and set bits 0-2 and 4-7; this ignores every key except '5' (left)
  35866,2 Merge this reading of the '5' key into bit 3 of #REGe
  35868,4 Read keys 0-9-8-7-6 ('8' is right) into bits 0-4 of #REGa
  35872 Set bits 0, 1 and 3-7; this ignores every key except '8' (right)
  35874,2 Merge this reading of the '8' key into bit 2 of #REGe
  35876 Collect the Kempston joystick indicator from #R33881
  35879 Is the joystick connected?
  35880 Jump if not
  35882,5 Collect input from the joystick
  35887,3 Keep only bits 0 (right) and 1 (left) and flip them
  35890,2 Merge this reading of the joystick right and left buttons into bits 0 and 1 of #REGe
D 35892 At this point, bits 0-5 in #REGe indicate the direction in which Willy is being moved or trying to move. If bit 0, 2 or 4 is reset, Willy is being moved or trying to move right; if bit 1, 3 or 5 is reset, Willy is being moved or trying to move left.
  35892 Initialise #REGc to 0 (no movement)
  35894 Copy the movement bits into #REGa
  35895 Keep only bits 1, 3 and 5 (the 'left' bits)
  35897 Are any of these bits reset?
  35899 Jump if not
  35901 Set bit 2 of #REGc: Willy is moving left
  35903 Copy the movement bits into #REGa
  35904 Keep only bits 0, 2 and 4 (the 'right' bits)
  35906 Are any of these bits reset?
  35908 Jump if not
  35910 Set bit 3 of #REGc: Willy is moving right
  35912 Pick up Willy's direction and movement flags from #R32874
  35915,8 Point #REGhl at the entry in the left-right movement table at #R33800 that corresponds to the direction Willy is facing, and the direction in which he is being moved or trying to move
  35923,4 Update Willy's direction and movement flags at #R32874 with the entry from the left-right movement table
D 35927 That is left-right movement taken care of. Now check the jump keys.
  35927,5 Read keys SHIFT-Z-X-C-V and B-N-M-SS-SPACE
  35932,4 Are any of these keys being pressed?
  35936 Jump if so
  35938,4 Read keys 0-9-8-7-6 into bits 0-4 of #REGa
  35942 Keep only bits 0 (the '0' key) and 3 (the '7' key)
  35944 Is '0' or '7' being pressed?
  35946 Jump if so
  35948 Collect the Kempston joystick indicator from #R33881
  35951 Is the joystick connected?
  35952 Jump if not
  35954,5 Collect input from the joystick
  35959 Is the fire button being pressed?
  35961 Jump if not
D 35963 A jump key or the fire button is being pressed. Time to make Willy jump.
  35963,4 Initialise the jumping animation counter at #R32878
  35967,4 Set the airborne status indicator at #R32875 to 1: Willy is jumping
  35971 Pick up Willy's direction and movement flags from #R32874
  35974 Is Willy moving?
  35976 Return if not
  35977 Pick up Willy's direction and movement flags from #R32874
  35980 Is Willy facing right?
  35982 Jump if so
D 35985 Willy is moving left.
  35985 Pick up Willy's animation frame from #R32873
  35988 Is it 0?
  35989 If so, jump to move Willy's sprite left across a cell boundary
  35991,4 Decrement Willy's animation frame at #R32873
D 35996 Willy's sprite is moving left across a cell boundary. In the comments that follow, (x,y) refers to the coordinates of the top-left cell currently occupied by Willy's sprite.
  35996 Collect Willy's attribute buffer coordinates from #R32876
  35999,5 Point #REGhl at the cell at (x-1,y+1)
  36004 Pick up the attribute byte of the wall tile for the current cavern from #R32827
  36007 Is there a wall tile in the cell pointed to by #REGhl?
  36008 Return if so without moving Willy (his path is blocked)
  36009 Pick up Willy's pixel y-coordinate from #R32872
  36012 Does Willy's sprite currently occupy only two rows of cells?
  36014 Jump if so
  36016 Pick up the attribute byte of the wall tile for the current cavern from #R32827
  36019 Point #REGhl at the cell at (x-1,y+2)
  36020 Is there a wall tile in the cell pointed to by #REGhl?
  36021 Return if so without moving Willy (his path is blocked)
  36022 Clear the carry flag for subtraction
  36023 Point #REGhl at the cell at (x-1,y+1)
  36025 Pick up the attribute byte of the wall tile for the current cavern from #R32827
  36028 Clear the carry flag for subtraction
  36029 Point #REGhl at the cell at (x-1,y)
  36031 Is there a wall tile in the cell pointed to by #REGhl?
  36032 Return if so without moving Willy (his path is blocked)
  36033 Save Willy's new attribute buffer coordinates (in #REGhl) at #R32876
  36036,5 Change Willy's animation frame at #R32873 from 0 to 3
D 36042 Willy is moving right.
  36042 Pick up Willy's animation frame from #R32873
  36045 Is it 3?
  36047 If so, jump to move Willy's sprite right across a cell boundary
  36049,4 Increment Willy's animation frame at #R32873
D 36054 Willy's sprite is moving right across a cell boundary. In the comments that follow, (x,y) refers to the coordinates of the top-left cell currently occupied by Willy's sprite.
  36054 Collect Willy's attribute buffer coordinates from #R32876
  36057,2 Point #REGhl at the cell at (x+2,y)
  36059 Prepare #REGde for addition
  36062 Pick up the attribute byte of the wall tile for the current cavern from #R32827
  36065 Point #REGhl at the cell at (x+2,y+1)
  36066 Is there a wall tile in the cell pointed to by #REGhl?
  36067 Return if so without moving Willy (his path is blocked)
  36068 Pick up Willy's pixel y-coordinate from #R32872
  36071 Does Willy's sprite currently occupy only two rows of cells?
  36073 Jump if so
  36075 Pick up the attribute byte of the wall tile for the current cavern from #R32827
  36078 Point #REGhl at the cell at (x+2,y+2)
  36079 Is there a wall tile in the cell pointed to by #REGhl?
  36080 Return if so without moving Willy (his path is blocked)
  36081 Clear the carry flag for subtraction
  36082 Point #REGhl at the cell at (x+2,y+1)
  36084 Pick up the attribute byte of the wall tile for the current cavern from #R32827
  36087 Clear the carry flag for subtraction
  36088 Point #REGhl at the cell at (x+2,y)
  36090 Is there a wall tile in the cell pointed to by #REGhl?
  36091 Return if so without moving Willy (his path is blocked)
  36092 Point #REGhl at the cell at (x+1,y)
  36093 Save Willy's new attribute buffer coordinates (in #REGhl) at #R32876
  36096,4 Change Willy's animation frame at #R32873 from 3 to 0
c 36101 Kill Willy
D 36102 This entry point is used by the routines at #R35805 (when Willy lands after falling from too great a height), #R36266, #R36344, #R36593 and #R37173.
c 36111 Move the horizontal guardians in the current cavern
c 36211 Move and draw the light beam in Solar Power Generator
c 36266 Draw the horizontal guardians in the current cavern
c 36344 Move and draw Eugene in Eugene's Lair
c 36469 Move and draw the Skylabs in Skylab Landing Bay
c 36593 Move and draw the vertical guardians in the current cavern
c 36707 Draw the items in the current cavern and collect any that Willy is touching
c 36805 Draw the portal in the current cavern
E 36805 This routine continues into the one at #R36852.
c 36852 Draw a sprite
D 36852 Used by the routines at #R34252, #R34574, #R35140, #R36266, #R36344, #R36469, #R36593, #R36805, #R36904 and #R37173.
c 36904 Move to the next cavern
c 37098 Add to the score
c 37125 Move the conveyor in the current cavern
c 37173 Move and draw the Kong Beast in the current cavern
c 37403 Check the switch in a Kong Beast cavern
c 37434 Check and set the attribute bytes for Willy's sprite in the buffer at 23552
c 37471 Check and set the attribute byte for a cell occupied by Willy's sprite
c 37503 Draw Willy to the screen buffer at 24576
c 37562 Print a message
c 37579 Print a single character
c 37596 Play the theme tune
R 37596 IY #R33902 (tune data)
c 37675 Calculate the attribute file address for a piano key
c 37687 Check whether ENTER or the fire button is being pressed
u 37708 Source code remnants
D 37708 The source code here corresponds to the code at #R34900.
T 37708,6,B1:3:B1:1 DEC E
M 37714,16 3960 JR NZ,NOFLP6
W 37714
B 37716
T 37717,13,B1:2:B1:9
M 37730,13 3970 LD E,(HL)
W 37730
B 37732
T 37733,10,B1:2:B1:6
M 37743,10 3980 XOR 24
W 37743
B 37745
T 37746,7,B1:3:B1:2
M 37753,19 3990 NOFLP6 DJNZ TM51
W 37753
B 37755
T 37756,16,6:B1:4:B1:4
M 37772,9 4000 DEC C
W 37772
B 37774
T 37775,6,B1:3:B1:1
M 37781,14 4010 JR NZ,TM51
W 37781
B 37783
T 37784,11,B1:2:B1:7
M 37795,22 4020 NONOTE4 LD A,(DEMO)
W 37795
B 37797
T 37798,19,7:B1:2:B1:8
M 37817,8 4030 OR A
W 37817
B 37819
T 37820,5,B1:2:B1:1
M 37825,15 4040 JR Z,NODEM1
W 37825
B 37827
T 37828,12,B1:2:B1:8
M 37840,9 4050 DEC A
W 37840
B 37842
T 37843,6,B1:3:B1:1
M 37849,16 4060 JP Z,MANDEAD
W 37849
B 37851
T 37852,13,B1:2:B1:9
M 37865,15 4070 LD (DEMO),A
W 37865
B 37867
T 37868,12,B1:2:B1:8
M 37880,14 4080 LD BC,0FEH
W 37880
B 37882
T 37883,11,B1:2:B1:7
M 37894,12 4090 IN A,(C)
W 37894
B 37896
T 37897,9,B1:2:B1:5
M 37906,10 4100 AND 31
W 37906
B 37908
T 37909,7,B1:3:B1:2
M 37916,9 4110 CP 31
W 37916
B 37918
T 37919,6,B1:2:B1:2
M 37925,15 4120 JP NZ,START
W 37925
B 37927
T 37928,12,B1:2:B1:8
M 37940,15 4130 LD A,(KEMP)
W 37940
B 37942
T 37943,12,B1:2:B1:8
M 37955,8 4140 OR A
W 37955
B 37957
T 37958,5,B1:2:B1:1
M 37963,15 4150 JR Z,NODEM1
W 37963
B 37965
T 37966,12,B1:2:B1:8
M 37978,13 4160 IN A,(31)
W 37978
B 37980
T 37981,10,B1:2:B1:6
M 37991,8 4170 OR A
W 37991
B 37993
T 37994,5,B1:2:B1:1
M 37999,15 4180 JP NZ,START
W 37999
B 38001
T 38002,12,B1:2:B1:8
M 38014,22 4190 NODEM1 LD BC,0EFFEH
W 38014
B 38016
T 38017,19,6:B1:2:B1:9
M 38036,12 4200 IN A,(C)
W 38036
B 38038
T 38039,9,B1:2:B1:5
M 38048,11 4210 BIT 4,A
W 38048
B 38050
T 38051,8,B1:3:B1:3
M 38059,17 4220 JP NZ,CKCHEAT
W 38059
B 38061
T 38062,14,B1:2:B1:10
M 38076,16 4230 LD A,(CHEAT)
W 38076
B 38078
T 38079,13,B1:2:B1:9
M 38092,8 4240 CP 7
W 38092
B 38094
T 38095,5,B1:2:B1:1
M 38100,17 4250 JP NZ,CKCHEAT
W 38100
B 38102
T 38103,14,B1:2:B1:10
M 38117,13 4260 LD B,0F7H
W 38117
B 38119
T 38120,10,B1:2:B1:6
M 38130,12 4270 IN A,(C)
W 38130
B 38132
T 38133,9,B1:2:B1:5
M 38142,7 4280 CPL
W 38142
B 38144
T 38145,4,B1:3
M 38149,10 4290 AND 31
W 38149
B 38151
T 38152,7,B1:3:B1:2
M 38159,9 4300 CP 20
W 38159
B 38161
T 38162,6,B1:2:B1:2
M 38168,17 4310 JP NC,CKCHEAT
W 38168
B 38170
T 38171,14,B1:2:B1:10
M 38185,16 4320 LD (SHEET),A
W 38185
B 38187
T 38188,13,B1:2:B1:9
M 38201,13 4330 JP NEWSHT
W 38201
B 38203
T 38204,10,B1:2:B1:6
M 38214,23 4340 CKCHEAT LD A,(CHEAT)
W 38214
B 38216
T 38217,20,7:B1:2:B1:9
M 38237,8 4350 CP 7
W 38237
B 38239
T 38240,5,B1:2:B1:1
M 38245,13 4360 JP Z,LOOP
W 38245
B 38247
T 38248,10,B1:2:B1:6
M 38258,8 4370 RLCA
W 38258
B 38260
T 38261,5,B1:4
M 38266,10 4380 LD E,A
W 38266
B 38268
T 38269,7,B1:2:B1:3
M 38276,10 4390 LD D,0
W 38276
B 38278
T 38279,7,B1:2:B1:3
M 38286,17 4400 LD IX,CHEATDT
W 38286
B 38288
T 38289,14,B1:2:B1:10
M 38303,13 4410 ADD IX,DE
W 38303
B 38305
T 38306,10,B1:3:B1:5
M 38316,16 4420 LD BC,0F7FEH
W 38316
B 38318
T 38319,13,B1:2:B1:9
M 38332,12 4430 IN A,(C)
W 38332
B 38334
T 38335,9,B1:2:B1:5
M 38344,10 4440 AND 31
W 38344
B 38346
T 38347,7,B1:3:B1:2
M 38354,13 4450 CP (IX+0)
W 38354
B 38356
T 38357,10,B1:2:B1:6
M 38367,16 4460 JR Z,CKNXCHT
W 38367
B 38369
T 38370,13,B1:2:B1:9
M 38383,9 4470 CP 31
W 38383
B 38385
T 38386,6,B1:2:B1:2
M 38392,13 4480 JP Z,LOOP
W 38392
B 38394
T 38395,10,B1:2:B1:6
M 38405,13 4490 CP (IX-2)
W 38405
B 38407
T 38408,10,B1:2:B1:6
M 38418,13 4500 JP Z,LOOP
W 38418
B 38420
T 38421,10,B1:2:B1:6
M 38431,9 4510 XOR A
W 38431
B 38433
T 38434,6,B1:3:B1:1
M 38440,16 4520 LD (CHEAT),A
W 38440
B 38442
T 38443,13,B1:2:B1:9
M 38456,11 4530 JP LOOP
W 38456
B 38458
T 38459,8,B1:2:B1:4
M 38467,20 4540 CKNXCHT LD B,0EFH
W 38467
B 38469
T 38470,17,7:B1:2:B1:6
M 38487,12 4550 IN A,(C)
W 38487
B 38489
T 38490,9,B1:2:B1:5
M 38499,10 4560 AND 31
W 38499
B 38501
T 38502,7,B1:3:B1:2
M 38509,13 4570 CP (IX+1)
W 38509
B 38511
T 38512,10,B1:2:B1:6
M 38522,15 4580 JR Z,INCCHT
W 38522
B 38524
T 38525,12,B1:2:B1:8
M 38537,9 4590 CP 31
W 38537
B 38539
T 38540,6,B1:2:B1:2
M 38546,13 4600 JP Z,LOOP
W 38546
B 38548
T 38549,10,B1:2:B1:6
M 38559,13 4610 CP (IX-1)
W 38559
B 38561
T 38562,10,B1:2:B1:6
M 38572,13 4620 JP Z,LOOP
W 38572
B 38574
T 38575,10,B1:2:B1:6
M 38585,9 4630 XOR A
W 38585
B 38587
T 38588,6,B1:3:B1:1
M 38594,16 4640 LD (CHEAT),A
W 38594
B 38596
T 38597,13,B1:2:B1:9
M 38610,11 4650 JP LOOP
W 38610
B 38612
T 38613,8,B1:2:B1:4
M 38621,22 4660 INCCHT LD A,(CHEAT)
W 38621
B 38623
T 38624,19,6:B1:2:B1:9
M 38643,9 4670 INC A
W 38643
B 38645
T 38646,6,B1:3:B1:1
M 38652,16 4680 LD (CHEAT),A
W 38652
B 38654
T 38655,13,B1:2:B1:9
M 38668,11 4690 JP LOOP
W 38668
B 38670
T 38671,8,B1:2:B1:4
M 38679,22 4700 MANDEAD LD A,(DEMO)
W 38679
B 38681
T 38682,19,7:B1:2:B1:8
M 38701,8 4710 OR A
W 38701
B 38703
T 38704,5,B1:2:B1:1
M 38709,17 4720 JP NZ,NXSHEET
W 38709
B 38711
T 38712,14,B1:2:B1:10
M 38726,12 4730 LD A,47H
W 38726
B 38728
T 38729,9,B1:2:B1:5
M 38738,22 4740 LPDEAD1 LD HL,5800H
W 38738
B 38740
T 38741,19,7:B1:2:B1:8
M 38760,15 4750 LD DE,5801H
W 38760
B 38762
T 38763,12,B1:2:B1:8
M 38775,14 4760 LD BC,1FFH
W 38775
B 38777
T 38778,11,B1:2:B1:7
M 38789,13 4770 LD (HL),A
W 38789
B 38791
T 38792,10,B1:2:B1:6
M 38802,8 4780 LDIR
W 38802
B 38804
T 38805,5,B1:4
M 38810,10 4790 LD E,A
W 38810
B 38812
T 38813,7,B1:2:B1:3
M 38820,7 4800 CPL
W 38820
B 38822
T 38823,4,B1:3
M 38827,9 4810 AND 7
W 38827
B 38829
T 38830,6,B1:3:B1:1
M 38836,8 4820 RLCA
W 38836
B 38838
T 38839,5,B1:4
M 38844,8 4830 RLCA
W 38844
B 38846
T 38847,5,B1:4
M 38852,8 4840 RLCA
W 38852
B 38854
T 38855,5,B1:4
M 38860,8 4850 OR 7
W 38860
B 38862
T 38863,5,B1:2:B1:1
M 38868,10 4860 LD D,A
W 38868
B 38870
T 38871,7,B1:2:B1:3
M 38878,10 4870 LD C,E
W 38878
B 38880
T 38881,7,B1:2:B1:3
M 38888,9 4880 RRC C
W 38888
B 38890
T 38891,6,B1:3:B1:1
M 38897,9 4890 RRC C
W 38897
B 38899
T 38900,6,B1:3:B1:1
M 38906,9 4900 RRC C
W 38906
B 38908
T 38909,6,B1:3:B1:1
M 38915,9 4910 OR 16
W 38915
B 38917
T 38918,6,B1:2:B1:2
M 38924,9 4920 XOR A
W 38924
B 38926
T 38927,6,B1:3:B1:1
M 38933,19 4930 TM21 OUT (254),A
W 38933
B 38935
T 38936,16,4:B1:3:B1:7
M 38952,10 4940 XOR 24
W 38952
B 38954
T 38955,7,B1:3:B1:2
M 38962,10 4950 LD B,D
W 38962
B 38964
T 38965,7,B1:2:B1:3
M 38972,17 4960 TM22 DJNZ TM22
W 38972
B 38974
T 38975,14,4:B1:4:B1:4
M 38989,9 4970 DEC C
W 38989
B 38991
T 38992,6,B1:3:B1:1
M 38998,14 4980 JR NZ,TM21
W 38998
B 39000
T 39001,11,B1:2:B1:7
M 39012,10 4990 LD A,E
W 39012
B 39014
T 39015,7,B1:2:B1:3
M 39022,9 5000 DEC A
W 39022
B 39024
T 39025,6,B1:3:B1:1
M 39031,10 5010 CP 3FH
W 39031
B 39033
T 39034,7,B1:2:B1:3
M 39041,17 5020 JR NZ,LPDEAD1
W 39041
B 39043
T 39044,14,B1:2:B1:10
M 39058,15 5030 LD HL,NOMEN
W 39058
B 39060
T 39061,12,B1:2:B1:8
M 39073,13 5040 LD A,(HL)
W 39073
B 39075
T 39076,10,B1:2:B1:6
M 39086,8 5050 OR A
W 39086
B 39088
T 39089,5,B1:2:B1:1
M 39094,15 5060 JP Z,ENDGAM
W 39094
B 39096
T 39097,12,B1:2:B1:8
M 39109,12 5070 DEC (HL)
W 39109
B 39111
T 39112,9,B1:3:B1:4
M 39121,13 5080 JP NEWSHT
W 39121
B 39123
T 39124,10,B1:2:B1:6
M 39134,23 5090 ENDGAM LD HL,HGHSCOR
W 39134
B 39136
T 39137,20,6:B1:2:B1:10
M 39157,17 5100 LD DE,SCORBUF
W 39157
B 39159
T 39160,14,B1:2:B1:10
M 39174,10 5110 LD B,6
W 39174
B 39176
T 39177,7,B1:2:B1:3
M 39184,18 5120 LPHGH LD A,(DE)
W 39184
B 39186
T 39187,15,5:B1:2:B1:6
M 39202,11 5130 CP (HL)
W 39202
B 39204
T 39205,8,B1:2:B1:4
M 39213,13 5140 JP C,FEET
W 39213
B 39215
T 39216,10,B1:2:B1:6
M 39226,16 5150 JP NZ,NEWHGH
W 39226
B 39228
T 39229,13,B1:2:B1:9
M 39242,10 5160 INC HL
W 39242
B 39244
T 39245,7,B1:3:B1:2
M 39252,10 5170 INC DE
W 39252
B 39254
T 39255,7,B1:3:B1:2
M 39262,14 5180 DJNZ LPHGH
W 39262
B 39264
T 39265,11,B1:4:B1:5
M 39276,23 5190 NEWHGH LD HL,SCORBUF
W 39276
B 39278
T 39279,20,6:B1:2:B1:10
M 39299,17 5200 LD DE,HGHSCOR
W 39299
B 39301
T 39302,14,B1:2:B1:10
M 39316,11 5210 LD BC,6
W 39316
B 39318
T 39319,8,B1:2:B1:4
M 39327,8 5220 LDIR
W 39327
B 39329
T 39330,5,B1:4
M 39335,19 5230 FEET LD HL,4000H
W 39335
B 39337
T 39338,16,4:B1:2:B1:8
M 39354,15 5240 LD DE,4001H
W 39354
B 39356
T 39357,12,B1:2:B1:8
M 39369,15 5250 LD BC,0FFFH
W 39369
B 39371
T 39372,12,B1:2:B1:8
M 39384,13 5260 LD (HL),0
W 39384
B 39386
T 39387,10,B1:2:B1:6
M 39397,8 5270 LDIR
W 39397
B 39399
T 39400,5,B1:4
M 39405,9 5280 XOR A
W 39405
B 39407
T 39408,6,B1:3:B1:1
M 39414,17 5290 LD (EUGHGT),A
W 39414
B 39416
T 39417,14,B1:2:B1:10
M 39431,19 5300 LD DE,MANDAT+64
W 39431
B 39433
T 39434,16,B1:2:B1:12
M 39450,15 5310 LD HL,488FH
W 39450
B 39452
T 39453,12,B1:2:B1:8
M 39465,10 5320 LD C,0
W 39465
B 39467
T 39468,7,B1:2:B1:3
M 39475,15 5330 CALL DRWFIX
W 39475
B 39477
T 39478,12,B1:4:B1:6
M 39490,16 5340 LD DE,0B6E0H
W 39490
B 39492
T 39493,13,B1:2:B1:9
M 39506,15 5350 LD HL,48CFH
W 39506
B 39508
T 39509,12,B1:2:B1:8
M 39521,10 5360 LD C,0
W 39521
B 39523
T 39524,7,B1:2:B1:3
M 39531,15 5370 CALL DRWFIX
W 39531
B 39533
T 39534,12,B1:4:B1:6
M 39546,23 5380 LOOPFT LD A,(EUGHGT)
W 39546
B 39548
T 39549,20,6:B1:2:B1:10
M 39569,10 5390 LD C,A
W 39569
B 39571
T 39572,7,B1:2:B1:3
M 39579,12 5400 LD B,83H
W 39579
B 39581
T 39582,9,B1:2:B1:5
M 39591,13 5410 LD A,(BC)
W 39591
B 39593
T 39594,10,B1:2:B1:6
M 39604,10 5420 OR 0FH
W 39604
B 39606
T 39607,7,B1:2:B1:3
M 39614,10 5430 LD L,A
W 39614
B 39616
T 39617,7,B1:2:B1:3
M 39624,10 5440 INC BC
W 39624
B 39626
T 39627,7,B1:3:B1:2
M 39634,13 5450 LD A,(BC)
W 39634
B 39636
T 39637,10,B1:2:B1:6
M 39647,11 5460 SUB 20H
W 39647
B 39649
T 39650,8,B1:3:B1:3
M 39658,10 5470 LD H,A
W 39658
B 39660
T 39661,7,B1:2:B1:3
M 39668,16 5480 LD DE,0BAE0H
W 39668
B 39670
T 39671,13,B1:2:B1:9
M 39684,10 5490 LD C,0
W 39684
B 39686
T 39687,7,B1:2:B1:3
M 39694,15 5500 CALL DRWFIX
W 39694
B 39696
T 39697,12,B1:4:B1:6
M 39709,17 5510 LD A,(EUGHGT)
W 39709
B 39711
T 39712,14,B1:2:B1:10
M 39726,7 5520 CPL
W 39726
B 39728
T 39729,4,B1:3
M 39733,10 5530 LD E,A
W 39733
B 39735
T 39736,7,B1:2:B1:3
M 39743,9 5540 XOR A
W 39743
B 39745
T 39746,6,B1:3:B1:1
M 39752,13 5550 LD BC,40H
W 39752
B 39754
T 39755,10,B1:2:B1:6
M 39765,20 5560 TM111 OUT (254),A
W 39765
B 39767
T 39768,17,5:B1:3:B1:7
M 39785,10 5570 XOR 24
W 39785
B 39787
T 39788,7,B1:3:B1:2
M 39795,10 5580 LD B,E
W 39795
B 39797
T 39798,7,B1:2:B1:3
M 39805,19 5590 TM112 DJNZ TM112
W 39805
B 39807
T 39808,16,5:B1:4:B1:5
M 39824,9 5600 DEC C
W 39824
B 39826
T 39827,6,B1:3:B1:1
M 39833,15 5610 JR NZ,TM111
W 39833
B 39835
T 39836,12,B1:2:B1:8
M 39848,15 5620 LD HL,5800H
W 39848
B 39850
T 39851,12,B1:2:B1:8
M 39863,15 5630 LD DE,5801H
W 39863
B 39865
T 39866,12,B1:2:B1:8
M 39878,14 5640 LD BC,1FFH
W 39878
B 39880
T 39881,11,B1:2:B1:7
M 39892,17 5650 LD A,(EUGHGT)
W 39892
B 39894
T 39895,14,B1:2:B1:10
M 39909,11 5660 AND 0CH
W 39909
B 39911
T 39912,8,B1:3:B1:3
M 39920,8 5670 RLCA
W 39920
B 39922
T 39923,5,B1:4
M 39928,10 5680 OR 47H
W 39928
B 39930
T 39931,7,B1:2:B1:3
M 39938,13 5690 LD (HL),A
W 39938
B 39940
T 39941,10,B1:2:B1:6
M 39951,8 5700 LDIR
W 39951
B 39953
T 39954,5,B1:4
M 39959,17 5710 LD A,(EUGHGT)
W 39959
B 39961
T 39962,14,B1:2:B1:10
M 39976,11 5720 ADD A,4
W 39976
B 39978
T 39979,8,B1:3:B1:3
M 39987,17 5730 LD (EUGHGT),A
W 39987
B 39989
T 39990,14,B1:2:B1:10
M 40004,11 5740 CP 0C4H
W 40004
B 40006
T 40007,8,B1:2:B1:4
M 40015,16 5750 JR NZ,LOOPFT
W 40015
B 40017
T 40018,13,B1:2:B1:9
M 40031,15 5760 LD IX,MESSG
W 40031
B 40033
T 40034,12,B1:2:B1:8
M 40046,10 5770 LD C,4
W 40046
B 40048
T 40049,7,B1:2:B1:3
M 40056,15 5780 LD DE,40CAH
W 40056
B 40058
T 40059,12,B1:2:B1:8
M 40071,14 5790 CALL PMESS
W 40071
B 40073
T 40074,11,B1:4:B1:5
M 40085,15 5800 LD IX,MESSO
W 40085
B 40087
T 40088,12,B1:2:B1:8
M 40100,10 5810 LD C,4
W 40100
B 40102
T 40103,7,B1:2:B1:3
M 40110,15 5820 LD DE,40D2H
W 40110
B 40112
T 40113,12,B1:2:B1:8
M 40125,14 5830 CALL PMESS
W 40125
B 40127
T 40128,11,B1:4:B1:5
M 40139,11 5840 LD BC,0
W 40139
B 40141
T 40142,8,B1:2:B1:4
M 40150,10 5850 LD D,6
W 40150
B 40152
T 40153,7,B1:2:B1:3
M 40160,17 5860 TM91 DJNZ TM91
W 40160
B 40162
T 40163,14,4:B1:4:B1:4
M 40177,10 5870 LD A,C
W 40177
B 40179
T 40180,7,B1:2:B1:3
M 40187,5 5880 A[ND 7] (at #R35316)
W 40187
B 40189
T 40190,2,B1:1
t 40192 '...MANIC MINER . . #CHR(169) BUG-BYTE ltd. 1983...'
D 40192 Used by the routine at #R34252.
T 40240,48,B1:47
T 40288
T 40336
T 40382
b 40448 Attribute data for the bottom two-thirds of the title screen
D 40448 Used by the routine at #R34252. The graphic data for the middle third of the title screen is located at #R43008.
B 40448,512,16
b 40960 Title screen graphic data
B 40960,4096,16
D 40960 Used by the routines at #R34252 and #R35445.
D 40960 #SCR2,,,,8,40960,64512(title_screen_1)
D 40960 The attributes for the top third of the title screen are located at #R64512 (in the cavern data for The Final Barrier).
D 40960 #SCR2,,8,,8,40960,40192(title_screen_2)
D 40960 The attributes for the middle third of the title screen are located at #R40448.
{caverns}
