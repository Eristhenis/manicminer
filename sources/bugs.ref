; Copyright 2014-2016 Richard Dymond (rjdymond@gmail.com)

[Bug:animatedPlatform:The animated platform]
There is a platform at (9,7) in #R62464(Amoebatrons' Revenge) whose third row of pixels is animated as if it were a conveyor. This is because there is a conveyor defined at that location (see #R63087), but the cavern layout places regular platform tiles there instead of conveyor tiles.

#UDGTABLE { #CALL:cavern(62464,2,animated_platform.gif,0,5,16,8,0,1) } TABLE#

To disable the animation (by moving the conveyor up a row to (8,7), which is occupied by background tiles):

POKE #R63087(63088),7

See #FACT#unusedConveyors() for more information.

[Bug:throughTheWall:Through the wall]
If Willy jumps left over the two nasties at the bottom right of #R49152(Eugene's Lair) such that he lands on the top layer of bricks with animation frame 3 at step 16 of the jumping animation, he will then fall through them to the bottom layer of bricks:

#UDGTABLE(gallery)
{ #CALL:wall_bug_img(1) | #CALL:wall_bug_img(2)  | #CALL:wall_bug_img(3) | #CALL:wall_bug_img(4) }
{ Step 15               | Step 16                | Step 17               | Step 18 }
TABLE#

This happens because the section of code at #R35600 - which is executed during jumping animation step 16, after Willy's y-coordinate has been updated so that he's exactly one cell height above the place he jumped from, but before his x-coordinate has been updated - checks whether there are any nasty tiles in the cells below Willy's sprite. If there are (as is the case here), the code jumps forward to #R35665, which makes Willy proceed to the next jumping animation step (as if the bricks were not there), instead of landing on the bricks.

Perhaps the assumption in this code is that if there is a nasty tile below Willy's sprite in step 16, then he will be killed by the nasty before reaching step 17; however, in this particular case Willy's x-coordinate decreases by one during step 16 (as he transitions from animation frame 0 to frame 3), which moves him out of the nasty's range.

[Bug:throughTheWallAgain:Through the wall again]
It's also possible to jump and land inside a wall block even when there is no nasty next to it.

If Willy's animation frame is 0 at step 16 of the animation while Willy is jumping left, the code at #R35996 checks whether Willy is free to move left across a cell boundary. However, the part of that code that checks whether there is a wall tile below Willy to the left is skipped when Willy's sprite is cell-aligned, which is always the case at step 16; so Willy moves left across the cell boundary and down into the wall block below, eventually landing with animation frame 2.

Places where this can happen are:

#UDGTABLE(gallery)
{ #CALL:ttwa_img(4,17,12,6,ttwa_el) | #CALL:ttwa_img(15,17,7,6,ttwa_sc1) | #CALL:ttwa_img(18,2,13,6,ttwa_spg) }
{ #R49152(Eugene's Lair)            | #R60416(The Sixteenth Cavern)      | #R63488(Solar Power Generator) }
TABLE#

Similarly, if Willy's animation frame is 3 at step 16 of the animation while Willy is jumping right, the code at #R36054 checks whether Willy is free to move right across a cell boundary. However, the part of that code that checks whether there is a wall tile below Willy to the right is skipped when Willy's sprite is cell-aligned, which is always the case at step 16; so Willy moves right across the cell boundary and down into the wall block below, eventually landing with animation frame 1.

Places where this can happen are:

#UDGTABLE(gallery)
{ #CALL:ttwa_img(1,27,4,1,ttwa_tcr) | #CALL:ttwa_img(15,9,10,1,ttwa_sc2) }
{ #R46080(The Cold Room)            | #R60416(The Sixteenth Cavern) }
TABLE#

When Willy lands inside a wall block, he can walk straight through it unless another wall block is in the way.

[Bug:attributeCrash:Attribute crash]
When a Skylab in #R58368(Skylab Landing Bay) crashes into a section of floor or conveyor, the attributes of that section are temporarily changed to that of the Skylab; the attributes are restored after the Skylab has finished disintegrating.

#UDGTABLE { #CALL:attribute_crash_img() } TABLE#

The reason for this is that the code at #R36447 (which is used to set the attributes for a Skylab) sets the attributes in not two but three rows of cells, to handle the case where a guardian's sprite is not cell-aligned. However, when a Skylab crashes, it <em>is</em> cell-aligned, and so its attributes needlessly bleed over to the floor or conveyor cells immediately below it.
