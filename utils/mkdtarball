#!/usr/bin/env bash

# Abort on any error
set -e

usage() {
  cat <<EOF
Usage: $(basename $0) [options]

  Create a release tarball and zip archive of the disassembly.

Options:
  -h  Show this help
EOF
  exit 1
}

readme() {
  cat <<EOF
The HTML disassembly in this archive was built from the source files in the
'src' subdirectory using version $SK_VERSION of SkoolKit.

SkoolKit can be obtained from the following locations:

  - http://skoolkit.ca/
  - https://launchpad.net/skoolkit

The HTML disassembly can be built from the source files by following these
steps:

1. Download and unpack SkoolKit $SK_VERSION.

2. Copy 'manicminer.py' from the 'skoolkit' subdirectory in this archive to
   the directory where SkoolKit was unpacked.

3. Copy the 'src' subdirectory into the directory where SkoolKit was unpacked.

4. Change to the directory where SkoolKit was unpacked and run this command:

  $ ./skool2html.py -W manicminer.ManicMinerHtmlWriter src/manic_miner.ref
EOF
}

asm_readme() {
  cat <<EOF
ASM
===
An ASM version of the disassembly in this archive can be built from the source
files in the 'src' subdirectory using version $SK_VERSION of SkoolKit.

SkoolKit can be obtained from the following locations:

  - http://skoolkit.ca/
  - https://launchpad.net/skoolkit

The ASM disassembly can be built by following these steps:

1. Download and unpack SkoolKit $SK_VERSION.

2. Copy 'manic_miner.skool' from the 'src' subdirectory in this archive to
   the directory where SkoolKit was unpacked.

3. Change to the directory where SkoolKit was unpacked and run this command:

  $ ./skool2asm.py -w manic_miner.skool > manic_miner.asm

Now manic_miner.asm can be assembled using pasmo (http://pasmo.speccy.org/):

  $ pasmo manic_miner.asm manic_miner.bin

To create a TAP file from manic_miner.bin, use the bin2tap.py utility,
included with SkoolKit:

  $ ./bin2tap.py -s 33792 manic_miner.bin

The resultant TAP file, manic_miner.tap, can be loaded into an emulator, and
the game will start automatically.
EOF
}

while [ -n "$1" ]; do
  case "$1" in
    -*) usage ;;
  esac
  shift
done

if [ -z "$MANICMINER_HOME" ]; then
  echo "Error: MANICMINER_HOME not defined."
  exit 1
fi
if [ ! -d "$MANICMINER_HOME" ]; then
  echo "Error: directory not found: $MANICMINER_HOME"
  exit 1
fi

MMZ80=$MANICMINER_HOME/build/manic_miner.z80

if [ ! -f skool2html.py ]; then
  echo "Error: skool2html.py not found."
  exit 1
fi
SK_VERSION=$(./skool2html.py -V 2>&1 | cut -f2 -d' ')

cp -p $MANICMINER_HOME/skoolkit/manicminer.py .
rm -rf src
mkdir src
cp -p $MANICMINER_HOME/{manic_miner.ref,COPYING} src

VERSION=$(grep ^Release= src/manic_miner.ref | grep -o '20.\{6\}')

if [ -z "$VERSION" ]; then
  echo "Error: could not find version number in src/manic_miner.ref"
  exit 1
fi

DISTDIR=dist
PKGNAME=mm-disassembly-$VERSION
ABSDIR=${DISTDIR}/${PKGNAME}
[ -e $ABSDIR ] && rm -rf $ABSDIR

if [ ! -f $MMZ80 ]; then
  echo -n "Writing $MMZ80..."
  if ./tap2sna.py -d $(dirname $MMZ80) $MANICMINER_HOME/manic_miner.t2s &> /dev/null; then
    echo "done"
  else
    echo "failed"
    exit 1
  fi
fi

echo -n "Writing control file..."
$MANICMINER_HOME/utils/mm2ctl.py $MMZ80 > manic_miner.ctl
echo "done"

echo -n "Writing skool file..."
./sna2skool.py -c manic_miner.ctl $MMZ80 > src/manic_miner.skool
echo "done"

echo -n "Writing disassembly..."
./skool2html.py -W manicminer.ManicMinerHtmlWriter -q -d ${ABSDIR} src/manic_miner.ref
echo "done"
mv ${ABSDIR}/{manic_miner,html}

echo -n "Copying source files and SkoolKit module..."
cp -a src ${ABSDIR}
SKMODDIR=${ABSDIR}/skoolkit
mkdir $SKMODDIR
cp -p COPYING manicminer.py $SKMODDIR
readme > ${ABSDIR}/readme.txt
asm_readme > ${ABSDIR}/asm.txt
echo "done"

cd $DISTDIR

echo "Creating ${DISTDIR}/${PKGNAME}.tar.xz"
tar acf ${PKGNAME}.tar.xz $PKGNAME

echo "Creating ${DISTDIR}/${PKGNAME}.zip"
zip -9qr ${PKGNAME}.zip $PKGNAME
